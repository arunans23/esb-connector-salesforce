<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<proxy xmlns="http://ws.apache.org/ns/synapse"
       name="salesforce"
       transports="https http"
       startOnLoad="true"
       trace="disable">
    <description/>
    <target>
        <inSequence>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="loginUrl"
                      expression="//ns:loginUrl/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="username"
                      expression="//ns:username/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="password"
                      expression="//ns:password/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="blocking"
                      expression="//ns:blocking/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="sobject"
                      expression="//ns:sobject/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="batchSize"
                      expression="//ns:batchSize/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="queryString"
                      expression="//ns:queryString/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="fieldList"
                      expression="//ns:fieldList/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="objectType"
                      expression="//ns:objectType/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="searchString"
                      expression="//ns:searchString/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="allOrNone"
                      expression="//ns:allOrNone/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="allowFieldTruncate"
                      expression="//ns:allowFieldTruncate/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="name"
                      expression="//sfdc:Name/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="email"
                      expression="//sfdc:Email/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="id"
                      expression="//sfdc:Id/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="newName"
                      expression="//sfdc:Name/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="type1"
                      expression="//sfdc:sObjectType/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="type2"
                      expression="//sfdc:sObjectType1/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="fieldList"
                      expression="//sfdc:fieldList/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="objectType"
                      expression="//sfdc:objectType/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="bccSender"
                      expression="//sfdc:bccSender/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="emailPriority"
                      expression="//sfdc:emailPriority/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="replyTo"
                      expression="//sfdc:replyTo/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="saveAsActivity"
                      expression="//sfdc:saveAsActivity/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="senderDisplayName"
                      expression="//sfdc:senderDisplayName/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="subject"
                      expression="//sfdc:subject/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="useSignature"
                      expression="//sfdc:useSignature/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="targetObjectId"
                      expression="//sfdc:targetObjectId/text()"/>
            <property xmlns:sfdc="wso2.connector.salesforce"
                      name="plainTextBody"
                      expression="//sfdc:plainTextBody/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="method"
                      expression="//ns:method/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="startDate"
                      expression="//ns:startDate/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="endDate"
                      expression="//ns:endDate/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="idForMerge1"
                      expression="//ns:idForMerge1/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="idForMerge2"
                      expression="//ns:idForMerge2/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="idForConvert1"
                      expression="//ns:idForConvert1/text()"/>
            <property xmlns:ns="wso2.connector.salesforce"
                      name="idForConvert2"
                      expression="//ns:idForConvert2/text()"/>
            <salesforce.init>
                <loginUrl>{$ctx:loginUrl}</loginUrl>
                <username>{$ctx:username}</username>
                <password>{$ctx:password}</password>
                <blocking>{$ctx:blocking}</blocking>
                <connectionType>basicAuth</connectionType>
            </salesforce.init>
            <switch source="get-property('method')">
                <case regex="getUserInfo">
                    <salesforce.getUserInfo-soap/>
                </case>
                <case regex="describeSObject">
                    <salesforce.describeSObject-soap>
                        <sobject>{$ctx:sobject}</sobject>
                    </salesforce.describeSObject-soap>
                </case>
                <case regex="describeGlobal">
                    <salesforce.describeGlobal-soap/>
                </case>
                <case regex="search">
                    <salesforce.search-soap>
                        <searchString>{$ctx:searchString}</searchString>
                    </salesforce.search-soap>
                </case>
                <case regex="create">
                    <payloadFactory media-type="xml">
                        <format>
                            <sfdc:sObjects xmlns:sfdc="sfdc" type="Account">
                                <sfdc:sObject>
                                    <sfdc:Name>$1</sfdc:Name>
                                </sfdc:sObject>
                            </sfdc:sObjects>
                        </format>
                        <args>
                            <arg expression="get-property('name')"/>
                        </args>
                    </payloadFactory>
                    <salesforce.create-soap>
                        <allOrNone>{$ctx:allOrNone}</allOrNone>
                        <allowFieldTruncate>{$ctx:allowFieldTruncate}</allowFieldTruncate>
                        <sobjects xmlns:sfdc="sfdc">{//sfdc:sObjects}</sobjects>
                    </salesforce.create-soap>
                </case>
                <case regex="delete">
                    <payloadFactory>
                        <format>
                            <sfdc:sObjects xmlns:sfdc="sfdc">
                                <sfdc:Id>$1</sfdc:Id>
                            </sfdc:sObjects>
                        </format>
                        <args>
                            <arg expression="get-property('id')"/>
                        </args>
                    </payloadFactory>
                    <salesforce.delete-soap>
                        <allOrNone>{$ctx:allOrNone}</allOrNone>
                        <sobjects xmlns:sfdc="sfdc">{//sfdc:sObjects}</sobjects>
                    </salesforce.delete-soap>
                </case>
                <case regex="getDeleted">
                    <salesforce.getDeleted-soap>
                        <sObjectType>{$ctx:type1}</sObjectType>
                        <startDate>{$ctx:startDate}</startDate>
                        <endDate>{$ctx:endDate}</endDate>
                    </salesforce.getDeleted-soap>
                </case>
                <case regex="getUpdated">
                    <salesforce.getUpdated-soap>
                        <sObjectType>{$ctx:type1}</sObjectType>
                        <startDate>{$ctx:startDate}</startDate>
                        <endDate>{$ctx:endDate}</endDate>
                    </salesforce.getUpdated-soap>
                </case>
                <case regex="getServerTimestamp">
                    <salesforce.getServerTimestamp-soap/>
                </case>
                <case regex="findDuplicates">
                    <payloadFactory>
                        <format>
                            <sfdc:sObjects xmlns:sfdc="sfdc">
                                <sfdc:sObject>
                                    <sfdc:type>Account</sfdc:type>
                                </sfdc:sObject>
                            </sfdc:sObjects>
                        </format>
                        <args/>
                    </payloadFactory>
                    <salesforce.findDuplicates-soap>
                        <sobjects xmlns:sfdc="sfdc">{//sfdc:sObjects}</sobjects>
                    </salesforce.findDuplicates-soap>
                </case>
                <case regex="findDuplicatesByIds">
                    <payloadFactory>
                        <format>
                            <sfdc:ids xmlns:sfdc="sfdc">
                                <sfdc:id>0012x000005mqKuAAI</sfdc:id>
                            </sfdc:ids>
                        </format>
                        <args/>
                    </payloadFactory>
                    <salesforce.findDuplicatesByIds-soap>
                        <ids xmlns:sfdc="sfdc">{//sfdc:ids}</ids>
                    </salesforce.findDuplicatesByIds-soap>
                </case>
                <case regex="merge">
                    <payloadFactory>
                        <format>
                            <sfdc:requests xmlns:sfdc="sfdc">
                                <sfdc:request>
                                    <sfdc:masterRecord>
                                        <sfdc:type>Account</sfdc:type>
                                        <sfdc:Id>$1</sfdc:Id>
                                    </sfdc:masterRecord>
                                    <sfdc:recordToMergeIds>$2</sfdc:recordToMergeIds>
                                </sfdc:request>
                            </sfdc:requests>
                        </format>
                        <args>
                            <arg expression="get-property('idForMerge1')"/>
                            <arg expression="get-property('idForMerge2')"/>
                        </args>
                    </payloadFactory>
                    <salesforce.merge-soap>
                        <mergerequests xmlns:sfdc="sfdc">{//sfdc:requests}</mergerequests>
                    </salesforce.merge-soap>
                </case>
                <case regex="createLead">
                    <payloadFactory media-type="xml">
                        <format>
                            <sfdc:sObjects type="Lead" xmlns:sfdc="sfdc">
                                <sfdc:sObject>
                                    <sfdc:LastName>Parker</sfdc:LastName>
                                    <sfdc:Company>wso2</sfdc:Company>
                                    <sfdc:Status>Open</sfdc:Status>
                                </sfdc:sObject>
                            </sfdc:sObjects>
                        </format>
                        <args/>
                    </payloadFactory>
                    <salesforce.create-soap>
                        <allOrNone>{$ctx:allOrNone}</allOrNone>
                        <allowFieldTruncate>{$ctx:allowFieldTruncate}</allowFieldTruncate>
                        <sobjects xmlns:sfdc="sfdc">{//sfdc:sObjects}</sobjects>
                    </salesforce.create-soap>
                </case>
                <case regex="convertLead">
                    <payloadFactory>
                        <format>
                            <sfdc:leadconvertrequests xmlns:sfdc="sfdc">
                                <sfdc:leadConverts>
                                    <sfdc:accountId>$1</sfdc:accountId>
                                    <sfdc:leadId>$2</sfdc:leadId>
                                    <sfdc:convertedStatus>Closed - Converted</sfdc:convertedStatus>
                                </sfdc:leadConverts>
                            </sfdc:leadconvertrequests>
                        </format>
                        <args>
                            <arg expression="get-property('idForConvert1')"/>
                            <arg expression="get-property('idForConvert2')"/>
                        </args>
                    </payloadFactory>
                    <salesforce.convertLead-soap>
                        <leadconvertrequests xmlns:sfdc="sfdc">{//sfdc:leadconvertrequests}</leadconvertrequests>
                    </salesforce.convertLead-soap>
                </case>
                <case regex="update">
                    <payloadFactory>
                        <format>
                            <sfdc:sObjects xmlns:sfdc="sfdc" type="Account">
                                <sfdc:sObject>
                                    <sfdc:Id>$1</sfdc:Id>
                                    <sfdc:Name>$2</sfdc:Name>
                                </sfdc:sObject>
                            </sfdc:sObjects>
                        </format>
                        <args>
                            <arg expression="get-property('id')"/>
                            <arg expression="get-property('newName')"/>
                        </args>
                    </payloadFactory>
                    <salesforce.update-soap>
                        <allOrNone>{$ctx:allOrNone}</allOrNone>
                        <allowFieldTruncate>{$ctx:allowFieldTruncate}</allowFieldTruncate>
                        <sobjects xmlns:sfdc="sfdc">{//sfdc:sObjects}</sobjects>
                    </salesforce.update-soap>
                </case>
                <case regex="undelete">
                    <payloadFactory>
                        <format>
                            <sfdc:sObjects xmlns:sfdc="sfdc">
                                <sfdc:Id>$1</sfdc:Id>
                            </sfdc:sObjects>
                        </format>
                        <args>
                            <arg expression="get-property('id')"/>
                        </args>
                    </payloadFactory>
                    <salesforce.undelete-soap>
                        <allOrNone>{$ctx:allOrNone}</allOrNone>
                        <sobjects xmlns:sfdc="sfdc">{//sfdc:sObjects}</sobjects>
                    </salesforce.undelete-soap>
                </case>
                <case regex="describeSObjects">
                    <payloadFactory>
                        <format>
                            <sfdc:sObjects xmlns:sfdc="sfdc">
                                <sfdc:sObjectType>$1</sfdc:sObjectType>
                                <sfdc:sObjectType>$2</sfdc:sObjectType>
                            </sfdc:sObjects>
                        </format>
                        <args>
                            <arg expression="get-property('type1')"/>
                            <arg expression="get-property('type2')"/>
                        </args>
                    </payloadFactory>
                    <salesforce.describeSObjects-soap>
                        <sobjects xmlns:sfdc="sfdc">{//sfdc:sObjects}</sobjects>
                    </salesforce.describeSObjects-soap>
                </case>
                <case regex="query">
                    <salesforce.query-soap>
                        <batchSize>{$ctx:batchSize}</batchSize>
                        <queryString>{$ctx:queryString}</queryString>
                    </salesforce.query-soap>
                </case>
                <case regex="retrieve">
                    <payloadFactory>
                        <format>
                            <sfdc:sObjects xmlns:sfdc="sfdc">
                                <sfdc:Id>$1</sfdc:Id>
                            </sfdc:sObjects>
                        </format>
                        <args>
                            <arg expression="get-property('id')"/>
                        </args>
                    </payloadFactory>
                    <salesforce.retrieve-soap>
                        <fieldList>{$ctx:fieldList}</fieldList>
                        <objectType>{$ctx:objectType}</objectType>
                        <objectIDS xmlns:sfdc="sfdc">{//sfdc:sObjects}</objectIDS>
                    </salesforce.retrieve-soap>
                </case>
                <case regex="sendEmail">
                    <payloadFactory>
                        <format>
                            <sfdc:emailWrapper xmlns:sfdc="sfdc">
                                <sfdc:messages type="urn:SingleEmailMessage">
                                    <sfdc:bccSender>$1</sfdc:bccSender>
                                    <sfdc:emailPriority>$2</sfdc:emailPriority>
                                    <sfdc:replyTo>$3</sfdc:replyTo>
                                    <sfdc:saveAsActivity>$4</sfdc:saveAsActivity>
                                    <sfdc:senderDisplayName>$5</sfdc:senderDisplayName>
                                    <sfdc:subject>$6</sfdc:subject>
                                    <sfdc:useSignature>$7</sfdc:useSignature>
                                    <sfdc:targetObjectId>$8</sfdc:targetObjectId>
                                    <sfdc:plainTextBody>$9</sfdc:plainTextBody>
                                </sfdc:messages>
                            </sfdc:emailWrapper>
                        </format>
                        <args>
                            <arg expression="get-property('bccSender')"/>
                            <arg expression="get-property('emailPriority')"/>
                            <arg expression="get-property('replyTo')"/>
                            <arg expression="get-property('saveAsActivity')"/>
                            <arg expression="get-property('senderDisplayName')"/>
                            <arg expression="get-property('subject')"/>
                            <arg expression="get-property('useSignature')"/>
                            <arg expression="get-property('targetObjectId')"/>
                            <arg expression="get-property('plainTextBody')"/>
                        </args>
                    </payloadFactory>
                    <salesforce.sendEmail-soap>
                        <sendEmail xmlns:sfdc="sfdc">{//sfdc:emailWrapper}</sendEmail>
                    </salesforce.sendEmail-soap>
                </case>
                <case regex="createContact">
                    <payloadFactory media-type="xml">
                        <format>
                            <sfdc:sObjects xmlns:sfdc="sfdc" type="Contact">
                                <sfdc:sObject>
                                    <sfdc:LastName>$1</sfdc:LastName>
                                    <sfdc:Email>$2</sfdc:Email>
                                </sfdc:sObject>
                            </sfdc:sObjects>
                        </format>
                        <args>
                            <arg expression="get-property('name')"/>
                            <arg expression="get-property('email')"/>
                        </args>
                    </payloadFactory>
                    <salesforce.create-soap>
                        <allOrNone>{$ctx:allOrNone}</allOrNone>
                        <allowFieldTruncate>{$ctx:allowFieldTruncate}</allowFieldTruncate>
                        <sobjects xmlns:sfdc="sfdc">{//sfdc:sObjects}</sobjects>
                    </salesforce.create-soap>
                </case>
                <case regex="logout">
                    <salesforce.logout-soap/>
                </case>
            </switch>
            <respond/>
        </inSequence>
        <outSequence>
            <send/>
        </outSequence>
    </target>
</proxy>